#!/bin/bash

MOUNT_BASE="$HOME/cc_my_mounting_point"
RCLONE_REMOTE="rclone_s3"
LOG_DIR="$HOME/.rclone/logs"
PID_DIR="$HOME/.rclone/pids"

mkdir -p "${LOG_DIR}" "${PID_DIR}"

check_container_name() {
  if [ -z "${1}" ]; then
    echo "Error: Container name not provided"
    echo "Usage: ${0} ${2} <container-name>"
    return 1
  fi
  return 0
}

start() {
  check_container_name "${1}" "start" || return 1
  local container_name="${1}"

  local mount_point="${MOUNT_BASE}/${container_name}"
  local pid_file="${PID_DIR}/${container_name}.pid"
  local log_file="${LOG_DIR}/${container_name}.log"

  if [ -f "${pid_file}" ]; then
    echo "Mount for ${container_name} already exists (PID: $(cat "${pid_file}"))"
    return 1
  fi

  mkdir -p "${mount_point}"
  if [ ! -f "${mount_point}/THIS_IS_NOT_MOUNTED" ]; then
    touch "${mount_point}/THIS_IS_NOT_MOUNTED"
  fi
  rclone mount "${RCLONE_REMOTE}":"${container_name}" "${mount_point}" \
    --daemon \
    --allow-non-empty \
    --log-level INFO \
    --log-file="${log_file}" &

  # Wait a moment for the process to start
  sleep 2

  local pid=$(pgrep -f "rclone mount ${RCLONE_REMOTE}:${container_name} ${mount_point}")

  if [ -n "${pid}" ]; then
    echo ${pid} > "${pid_file}"
    echo "Started mount for ${container_name} (PID: ${pid})"
  else
    echo "Failed to start mount for ${container_name}"
    return 1
  fi
}

stop() {
  check_container_name "${1}" "stop" || return 1
  local container_name="${1}"

  local pid_file="${PID_DIR}/${container_name}.pid"
  local mount_point="${MOUNT_BASE}/${container_name}"

  if [ ! -f "${pid_file}" ]; then
    echo "No mount found for ${container_name}. Is it running?"
    return 1
  fi

  local pid=$(cat "${pid_file}")
  kill "${pid}"
  fusermount -uz "${mount_point}"
  rm "${pid_file}"
  echo "Stopped mount for ${container_name}"
}

status() {
  check_container_name "${1}" "status" || return 1
  local container_name="${1}"

  local pid_file="${PID_DIR}/${container_name}.pid"
  local mount_point="${MOUNT_BASE}/${container_name}"

  if [ -f "${pid_file}" ]; then
    local pid=$(cat "${pid_file}")
    if kill -0 "${pid}" 2>/dev/null; then
      echo "Mount for ${container_name} is active (PID: ${pid})"
      echo "Mount point: ${mount_point}"
    else
      echo "Mount for ${container_name} exists but process is not running"
      echo "You may want to clean up the stale PID file: ${pid_file}"
    fi
  else
      echo "No mount found for ${container_name}. Is it running?"
  fi
}

list_mounts() {
  echo "Active mounts:"
  local found_mounts=false
  for pid_file in "${PID_DIR}"/*.pid; do
    if [ -f "${pid_file}" ]; then
      local container_name=$(basename "${pid_file}" .pid)
      local pid=$(cat "${pid_file}")
      local mount_point="${MOUNT_BASE}/${container_name}"
      if kill -0 "${pid}" 2>/dev/null; then
        printf "%-20s - PID: %-6s - Mount: %s\n" "${container_name}" "${pid}" "${mount_point}"
        found_mounts=true
      else
        printf "%-20s - Stale PID: %-6s - NOT MOUNTED!\n" "$container_name" "${pid}"
      fi
    fi
  done

  if [ "${found_mounts}" = false ]; then
    echo "  No active mounts found"
  fi
}

case "${1}" in
  start)
    start "${2}"
    ;;
  stop)
    stop "${2}"
    ;;
  status)
    status "${2}"
    ;;
  list)
    list_mounts
    ;;
  *)
    echo "Usage: ${0} {start|stop|status|list} [<container-name>]"
    exit 1
    ;;
esac
